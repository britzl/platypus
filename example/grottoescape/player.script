local platypus = require "platypus.platypus"
local input = require "in.state"
local input_mapper = require "in.mapper"

local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")
local TOGGLE_DEBUG = hash("toggle_debug")
local TOGGLE_PROFILE = hash("toggle_profile")

local ANIM_RUN = hash("run")
local ANIM_JUMP = hash("jump")
local ANIM_IDLE = hash("idle")


local function play_animation(self, animation)
	if self.current_animation ~= animation then
		msg.post("#sprite", "play_animation", { id = animation })
		self.current_animation = animation
	end
end


function init(self)
	input.acquire()
	input_mapper.bind(input_mapper.KEY_LEFT, LEFT)
	input_mapper.bind(input_mapper.KEY_RIGHT, RIGHT)
	input_mapper.bind(input_mapper.KEY_SPACE, JUMP)
	input_mapper.bind(input_mapper.KEY_1, TOGGLE_DEBUG)
	input_mapper.bind(input_mapper.KEY_2, TOGGLE_PROFILE)
	self.platypus = platypus.create({
		collisions = {
			--separation = platypus.SEPARATION_RAYS,
			separation = platypus.SEPARATION_SHAPES,
			groups = {
				[hash("ground")] = platypus.DIR_ALL,
				--[hash("onewayplatform")] = platypus.DIR_ALL,
				[hash("onewayplatform")] = platypus.DIR_DOWN,
				[hash("onewaydoor")] = platypus.DIR_LEFT,
			},
			left = 7, right = 7, top = 7, bottom = 7, offset = vmath.vector3(0, 7, 0)
		},
		gravity = -800,
		max_velocity = 580,
		allow_double_jump = true,
		allow_wall_jump = true,
		allow_wall_slide = true,
		wall_slide_gravity = -50
		--debug = true,
	})
	self.current_animation = nil
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.008, 0.090, 0.129, 1.0) })
end

function update(self, dt)
	local ground_contact = self.platypus.has_ground_contact()
	if input.is_pressed(LEFT) then
		self.platypus.left(ground_contact and 120 or 100)
		play_animation(self, ground_contact and ANIM_RUN or ANIM_JUMP)
		sprite.set_hflip("#sprite", true)
	elseif input.is_pressed(RIGHT) then
		self.platypus.right(ground_contact and 120 or 100)
		play_animation(self, ground_contact and ANIM_RUN or ANIM_JUMP)
		sprite.set_hflip("#sprite", false)
	else
		self.platypus.abort_wall_slide()
		play_animation(self, ground_contact and ANIM_IDLE or ANIM_JUMP)
	end
	self.platypus.update(dt)
end

function on_message(self, message_id, message, sender)
	self.platypus.on_message(message_id, message, sender)
	if message_id == platypus.GROUND_CONTACT then
		print("Ground contact")
	elseif message_id == platypus.WALL_CONTACT then
		print("Wall contact")
	elseif message_id == platypus.FALLING then
		print("Falling")
	elseif message_id == platypus.WALL_JUMP then
		sprite.set_hflip("#sprite", self.platypus.velocity.x < 0)
	end
end

function on_input(self, action_id, action)
	action_id = input_mapper.on_input(action_id)
	if action_id == hash("toggle_profile") then
		if action.released then
			msg.post("@system:", "toggle_profile")
		end
		return
	end

	input.on_input(action_id, action)
	if action_id == JUMP then
		if action.pressed then
			self.platypus.jump(300)
		elseif action.released then
			self.platypus.abort_jump()
		end
	elseif action_id == TOGGLE_DEBUG and action.released then
		self.platypus.toggle_debug()
		msg.post("@system:", "toggle_physics_debug")
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
